"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const lib_1 = require("../../../lib");
const capabilities_1 = require("../capabilities");
function default_1(session) {
    return (event) => __awaiter(this, void 0, void 0, function* () {
        const overrides = event.initializationOptions;
        session.initConf = event;
        session.settings.imandra = lib_1.ISettings.withDefaults(overrides);
        const opamCmd = child_process_1.execSync(`command -v ${session.settings.imandra.path.opam} 2>&1 || echo >&2 ""`).toString();
        if (opamCmd === "") {
            session.hasOpam = undefined;
        }
        else {
            const version = child_process_1.execSync(`${session.settings.imandra.path.opam} --version`).toString();
            session.hasOpam = version.substring(0, 1);
        }
        yield session.initialize();
        return { capabilities: capabilities_1.default };
    });
}
exports.default = default_1;
//# sourceMappingURL=initialize.js.map